/*
 * generated by Xtext 2.24.0
 */
package sdu.mdsd.math.interpreter.generator

import javax.swing.JOptionPane
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import sdu.mdsd.math.interpreter.mathInterpreter.Div
import sdu.mdsd.math.interpreter.mathInterpreter.MathExp
import sdu.mdsd.math.interpreter.mathInterpreter.Minus
import sdu.mdsd.math.interpreter.mathInterpreter.Mult
import sdu.mdsd.math.interpreter.mathInterpreter.Plus
import sdu.mdsd.math.interpreter.mathInterpreter.Parenthesis
import sdu.mdsd.math.interpreter.mathInterpreter.impl.NumberImpl
import sdu.mdsd.math.interpreter.mathInterpreter.impl.ParenthesisImpl
import sdu.mdsd.math.interpreter.mathInterpreter.impl.PlusImpl
import sdu.mdsd.math.interpreter.mathInterpreter.impl.MinusImpl
import sdu.mdsd.math.interpreter.mathInterpreter.impl.ExpOpImpl
import sdu.mdsd.math.interpreter.mathInterpreter.BasicExp
import sdu.mdsd.math.interpreter.mathInterpreter.Exp
import sdu.mdsd.math.interpreter.mathInterpreter.FactorExp
import sdu.mdsd.math.interpreter.mathInterpreter.impl.FactorExpImpl

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MathInterpreterGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val math = resource.allContents.filter(MathExp).next
		val result = math.compute
		System.out.println("Math expression = "+math.display)
		// For +1 score, replace with hovering, see Bettini Chapter 8
		//JOptionPane.showMessageDialog(null, "result = "+result,"Math Language", JOptionPane.INFORMATION_MESSAGE)
		
		
		resource.allContents.toIterable.filter(typeof(MathExp)).forEach[
			fsa.generateFile('''«resource.URI.lastSegment».evaluated''', 
				compute.toString
			)
		]
	}
	
	//
	// Compute function: computes value of expression
	// Note: written according to illegal left-recursive grammar, requires fix
	//
	
	def static int staticCompute(MathExp math) {
		(new MathInterpreterGenerator).compute(math)
	}
	
	def int compute(MathExp math) { 
		math.exp.computeExp
	}
	
	def dispatch int computeExp(Exp exp) {
		exp.left.computeExp
	}
	
	def dispatch int computeExp(BasicExp exp) {
		System.out.println("computing BasicExp")
		switch exp.operator {
			Plus: exp.left.computeExp + exp.right.computeExp
			Minus: exp.left.computeExp - exp.right.computeExp
			default: exp.left.computeExp
		}
	}
	
	def dispatch int computeExp(FactorExp factor) {
		switch factor.operator {
			Mult: factor.left.computeExp * factor.right.computeExp
			Div: factor.left.computeExp / factor.right.computeExp
			default: factor.left.computeExp
		}
	}
	
	def dispatch int computeExp(Number number) {
		number.intValue
	}
	
	def dispatch int computeExp(NumberImpl number) {
		number.value
	}
	
	def dispatch int computeExp(Parenthesis parenthesis) {
		parenthesis.exp.computeExp
	}
	
	def dispatch int computeExp(ParenthesisImpl parenthesis) {
		parenthesis.exp.computeExp
	}

	//
	// Display function: show complete syntax tree
	// Note: written according to illegal left-recursive grammar, requires fix
	//

	def static CharSequence staticDisplay(MathExp math) {
		(new MathInterpreterGenerator).display(math)
	}

	def CharSequence display(MathExp math) '''Math[«math.exp.displayExp»]'''
	def dispatch CharSequence displayExp(Exp exp) '''«exp.left.displayExp»'''
	def dispatch CharSequence displayExp(BasicExp exp) '''«exp.left.displayExp» «exp.operator?.displayOp» «exp.right?.displayExp»'''
	def dispatch CharSequence displayExp(FactorExp fac) '''«fac.left.displayExp» «fac.operator?.displayOp» «fac.right.displayExp»'''
	def dispatch CharSequence displayExp(Number primary) '''«primary.intValue»'''
	def dispatch CharSequence displayExp(Parenthesis primary) '''(«primary.exp.displayExp»)'''
	def dispatch CharSequence displayExp(NumberImpl primary) '''«primary.value»'''
	def dispatch CharSequence displayExp(ParenthesisImpl primary) '''(«primary.exp.displayExp»)'''
	def dispatch String displayOp(Plus op)  { "+" }
	def dispatch String displayOp(Minus op) { "-" }
	def dispatch String displayOp(Mult op) { "*" }
	def dispatch String displayOp(Div op) { "/" }
}
