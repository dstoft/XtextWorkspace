/*
 * generated by Xtext 2.24.0
 */
package sdu.mdsd.math.interpreter.generator

import javax.swing.JOptionPane
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import sdu.mdsd.math.interpreter.mathInterpreter.*

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MathInterpreterGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val math = resource.allContents.filter(MathExp).next
		val result = math.compute
		System.out.println("Math expression = "+math.display)
		// For +1 score, replace with hovering, see Bettini Chapter 8
		JOptionPane.showMessageDialog(null, "result = "+result,"Math Language", JOptionPane.INFORMATION_MESSAGE)
	}
	
	//
	// Compute function: computes value of expression
	// Note: written according to illegal left-recursive grammar, requires fix
	//
	
	def int compute(MathExp math) { 
		math.exp.computeExp
	}
	
	def int computeExp(Exp exp) {
		
		//val left = exp.left.computePrim
		//switch exp.operator {
		//	Plus: left+exp.right.computeExp
		//	Minus: left-exp.right.computeExp
			//Mult: left*exp.right.computeExp
			//Div: left/exp.right.computeExp
		//	default: left
		//}
		return 87
	}
	
	def int computePrim(Primary primary) { 
		87
	}

	//
	// Display function: show complete syntax tree
	// Note: written according to illegal left-recursive grammar, requires fix
	//

	def CharSequence display(MathExp math) '''Math[«math.exp.displayExp»]'''
	def CharSequence displayExp(Exp exp) ''''''
	//def CharSequence displayExp(Exp exp) '''Exp[«exp.left.displayPrim»,«exp.operator?.displayOp»,«exp.right?.displayExp»]'''
	def CharSequence displayFactor(Factor fac) ''''''
	def dispatch String displayOp(Plus op)  { "+" }
	def dispatch String displayOp(Minus op) { "-" }
	def CharSequence displayFactor(Primary primary) { "?" }
}
