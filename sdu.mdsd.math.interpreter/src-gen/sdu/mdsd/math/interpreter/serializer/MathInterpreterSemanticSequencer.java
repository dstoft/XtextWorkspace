/*
 * generated by Xtext 2.24.0
 */
package sdu.mdsd.math.interpreter.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import sdu.mdsd.math.interpreter.mathInterpreter.BasicExp;
import sdu.mdsd.math.interpreter.mathInterpreter.Div;
import sdu.mdsd.math.interpreter.mathInterpreter.Exp;
import sdu.mdsd.math.interpreter.mathInterpreter.FactorExp;
import sdu.mdsd.math.interpreter.mathInterpreter.MathExp;
import sdu.mdsd.math.interpreter.mathInterpreter.MathInterpreterPackage;
import sdu.mdsd.math.interpreter.mathInterpreter.Minus;
import sdu.mdsd.math.interpreter.mathInterpreter.Mult;
import sdu.mdsd.math.interpreter.mathInterpreter.Parenthesis;
import sdu.mdsd.math.interpreter.mathInterpreter.Plus;
import sdu.mdsd.math.interpreter.services.MathInterpreterGrammarAccess;

@SuppressWarnings("all")
public class MathInterpreterSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MathInterpreterGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MathInterpreterPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MathInterpreterPackage.BASIC_EXP:
				sequence_Exp(context, (BasicExp) semanticObject); 
				return; 
			case MathInterpreterPackage.DIV:
				sequence_FactorOp(context, (Div) semanticObject); 
				return; 
			case MathInterpreterPackage.EXP:
				if (rule == grammarAccess.getExpRule()
						|| action == grammarAccess.getExpAccess().getBasicExpLeftAction_1_0()) {
					sequence_Exp(context, (Exp) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getFactorRule()
						|| action == grammarAccess.getFactorAccess().getFactorExpLeftAction_1_0()) {
					sequence_Factor(context, (Exp) semanticObject); 
					return; 
				}
				else break;
			case MathInterpreterPackage.FACTOR_EXP:
				sequence_Factor(context, (FactorExp) semanticObject); 
				return; 
			case MathInterpreterPackage.MATH_EXP:
				sequence_MathExp(context, (MathExp) semanticObject); 
				return; 
			case MathInterpreterPackage.MINUS:
				sequence_ExpOp(context, (Minus) semanticObject); 
				return; 
			case MathInterpreterPackage.MULT:
				sequence_FactorOp(context, (Mult) semanticObject); 
				return; 
			case MathInterpreterPackage.NUMBER:
				sequence_Number(context, (sdu.mdsd.math.interpreter.mathInterpreter.Number) semanticObject); 
				return; 
			case MathInterpreterPackage.PARENTHESIS:
				sequence_Parenthesis(context, (Parenthesis) semanticObject); 
				return; 
			case MathInterpreterPackage.PLUS:
				sequence_ExpOp(context, (Plus) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     ExpOp returns Minus
	 *
	 * Constraint:
	 *     {Minus}
	 */
	protected void sequence_ExpOp(ISerializationContext context, Minus semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ExpOp returns Plus
	 *
	 * Constraint:
	 *     {Plus}
	 */
	protected void sequence_ExpOp(ISerializationContext context, Plus semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Exp returns BasicExp
	 *     Exp.BasicExp_1_0 returns BasicExp
	 *
	 * Constraint:
	 *     (left=Exp_BasicExp_1_0 operator=ExpOp right=Factor)
	 */
	protected void sequence_Exp(ISerializationContext context, BasicExp semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MathInterpreterPackage.Literals.EXP__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathInterpreterPackage.Literals.EXP__LEFT));
			if (transientValues.isValueTransient(semanticObject, MathInterpreterPackage.Literals.BASIC_EXP__OPERATOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathInterpreterPackage.Literals.BASIC_EXP__OPERATOR));
			if (transientValues.isValueTransient(semanticObject, MathInterpreterPackage.Literals.BASIC_EXP__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathInterpreterPackage.Literals.BASIC_EXP__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpAccess().getBasicExpLeftAction_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getExpAccess().getOperatorExpOpParserRuleCall_1_1_0(), semanticObject.getOperator());
		feeder.accept(grammarAccess.getExpAccess().getRightFactorParserRuleCall_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Exp returns Exp
	 *     Exp.BasicExp_1_0 returns Exp
	 *
	 * Constraint:
	 *     left=Factor
	 */
	protected void sequence_Exp(ISerializationContext context, Exp semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MathInterpreterPackage.Literals.EXP__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathInterpreterPackage.Literals.EXP__LEFT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpAccess().getLeftFactorParserRuleCall_0_0(), semanticObject.getLeft());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     FactorOp returns Div
	 *
	 * Constraint:
	 *     {Div}
	 */
	protected void sequence_FactorOp(ISerializationContext context, Div semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FactorOp returns Mult
	 *
	 * Constraint:
	 *     {Mult}
	 */
	protected void sequence_FactorOp(ISerializationContext context, Mult semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Factor returns Exp
	 *     Factor.FactorExp_1_0 returns Exp
	 *
	 * Constraint:
	 *     left=Primary
	 */
	protected void sequence_Factor(ISerializationContext context, Exp semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MathInterpreterPackage.Literals.EXP__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathInterpreterPackage.Literals.EXP__LEFT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFactorAccess().getLeftPrimaryParserRuleCall_0_0(), semanticObject.getLeft());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Factor returns FactorExp
	 *     Factor.FactorExp_1_0 returns FactorExp
	 *
	 * Constraint:
	 *     (left=Factor_FactorExp_1_0 operator=FactorOp right=Primary)
	 */
	protected void sequence_Factor(ISerializationContext context, FactorExp semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MathInterpreterPackage.Literals.EXP__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathInterpreterPackage.Literals.EXP__LEFT));
			if (transientValues.isValueTransient(semanticObject, MathInterpreterPackage.Literals.FACTOR_EXP__OPERATOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathInterpreterPackage.Literals.FACTOR_EXP__OPERATOR));
			if (transientValues.isValueTransient(semanticObject, MathInterpreterPackage.Literals.FACTOR_EXP__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathInterpreterPackage.Literals.FACTOR_EXP__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFactorAccess().getFactorExpLeftAction_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getFactorAccess().getOperatorFactorOpParserRuleCall_1_1_0(), semanticObject.getOperator());
		feeder.accept(grammarAccess.getFactorAccess().getRightPrimaryParserRuleCall_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MathExp returns MathExp
	 *
	 * Constraint:
	 *     exp=Exp
	 */
	protected void sequence_MathExp(ISerializationContext context, MathExp semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MathInterpreterPackage.Literals.MATH_EXP__EXP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathInterpreterPackage.Literals.MATH_EXP__EXP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMathExpAccess().getExpExpParserRuleCall_2_0(), semanticObject.getExp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Primary returns Number
	 *     Number returns Number
	 *
	 * Constraint:
	 *     value=INT
	 */
	protected void sequence_Number(ISerializationContext context, sdu.mdsd.math.interpreter.mathInterpreter.Number semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MathInterpreterPackage.Literals.NUMBER__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathInterpreterPackage.Literals.NUMBER__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNumberAccess().getValueINTTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Primary returns Parenthesis
	 *     Parenthesis returns Parenthesis
	 *
	 * Constraint:
	 *     exp=Exp
	 */
	protected void sequence_Parenthesis(ISerializationContext context, Parenthesis semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MathInterpreterPackage.Literals.PARENTHESIS__EXP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathInterpreterPackage.Literals.PARENTHESIS__EXP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getParenthesisAccess().getExpExpParserRuleCall_1_0(), semanticObject.getExp());
		feeder.finish();
	}
	
	
}
