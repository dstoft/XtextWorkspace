/**
 * generated by Xtext 2.24.0
 */
package sdu.mdsd.math.interpreter.generator;

import com.google.common.collect.Iterables;
import com.google.common.collect.Iterators;
import java.util.Arrays;
import java.util.function.Consumer;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import sdu.mdsd.math.interpreter.mathInterpreter.BasicExp;
import sdu.mdsd.math.interpreter.mathInterpreter.Div;
import sdu.mdsd.math.interpreter.mathInterpreter.Exp;
import sdu.mdsd.math.interpreter.mathInterpreter.ExpOp;
import sdu.mdsd.math.interpreter.mathInterpreter.FactorExp;
import sdu.mdsd.math.interpreter.mathInterpreter.FactorOp;
import sdu.mdsd.math.interpreter.mathInterpreter.MathExp;
import sdu.mdsd.math.interpreter.mathInterpreter.Minus;
import sdu.mdsd.math.interpreter.mathInterpreter.Mult;
import sdu.mdsd.math.interpreter.mathInterpreter.Parenthesis;
import sdu.mdsd.math.interpreter.mathInterpreter.Plus;
import sdu.mdsd.math.interpreter.mathInterpreter.impl.NumberImpl;
import sdu.mdsd.math.interpreter.mathInterpreter.impl.ParenthesisImpl;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class MathInterpreterGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    final MathExp math = Iterators.<MathExp>filter(resource.getAllContents(), MathExp.class).next();
    final int result = this.compute(math);
    CharSequence _display = this.display(math);
    String _plus = ("Math expression = " + _display);
    System.out.println(_plus);
    final Consumer<MathExp> _function = (MathExp it) -> {
      StringConcatenation _builder = new StringConcatenation();
      String _lastSegment = resource.getURI().lastSegment();
      _builder.append(_lastSegment);
      _builder.append(".evaluated");
      fsa.generateFile(_builder.toString(), 
        Integer.valueOf(this.compute(it)).toString());
    };
    Iterables.<MathExp>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), MathExp.class).forEach(_function);
  }
  
  public static int staticCompute(final MathExp math) {
    return new MathInterpreterGenerator().compute(math);
  }
  
  public int compute(final MathExp math) {
    return this.computeExp(math.getExp());
  }
  
  protected int _computeExp(final Exp exp) {
    return this.computeExp(exp.getLeft());
  }
  
  protected int _computeExp(final BasicExp exp) {
    int _xblockexpression = (int) 0;
    {
      System.out.println("computing BasicExp");
      int _switchResult = (int) 0;
      ExpOp _operator = exp.getOperator();
      boolean _matched = false;
      if (_operator instanceof Plus) {
        _matched=true;
        int _computeExp = this.computeExp(exp.getLeft());
        int _computeExp_1 = this.computeExp(exp.getRight());
        _switchResult = (_computeExp + _computeExp_1);
      }
      if (!_matched) {
        if (_operator instanceof Minus) {
          _matched=true;
          int _computeExp = this.computeExp(exp.getLeft());
          int _computeExp_1 = this.computeExp(exp.getRight());
          _switchResult = (_computeExp - _computeExp_1);
        }
      }
      if (!_matched) {
        _switchResult = this.computeExp(exp.getLeft());
      }
      _xblockexpression = _switchResult;
    }
    return _xblockexpression;
  }
  
  protected int _computeExp(final FactorExp factor) {
    int _switchResult = (int) 0;
    FactorOp _operator = factor.getOperator();
    boolean _matched = false;
    if (_operator instanceof Mult) {
      _matched=true;
      int _computeExp = this.computeExp(factor.getLeft());
      int _computeExp_1 = this.computeExp(factor.getRight());
      _switchResult = (_computeExp * _computeExp_1);
    }
    if (!_matched) {
      if (_operator instanceof Div) {
        _matched=true;
        int _computeExp = this.computeExp(factor.getLeft());
        int _computeExp_1 = this.computeExp(factor.getRight());
        _switchResult = (_computeExp / _computeExp_1);
      }
    }
    if (!_matched) {
      _switchResult = this.computeExp(factor.getLeft());
    }
    return _switchResult;
  }
  
  protected int _computeExp(final Number number) {
    return number.intValue();
  }
  
  protected int _computeExp(final NumberImpl number) {
    return number.getValue();
  }
  
  protected int _computeExp(final Parenthesis parenthesis) {
    return this.computeExp(parenthesis.getExp());
  }
  
  protected int _computeExp(final ParenthesisImpl parenthesis) {
    return this.computeExp(parenthesis.getExp());
  }
  
  public static CharSequence staticDisplay(final MathExp math) {
    return new MathInterpreterGenerator().display(math);
  }
  
  public CharSequence display(final MathExp math) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("Math[");
    CharSequence _displayExp = this.displayExp(math.getExp());
    _builder.append(_displayExp);
    _builder.append("]");
    return _builder;
  }
  
  protected CharSequence _displayExp(final Exp exp) {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence _displayExp = this.displayExp(exp.getLeft());
    _builder.append(_displayExp);
    return _builder;
  }
  
  protected CharSequence _displayExp(final BasicExp exp) {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence _displayExp = this.displayExp(exp.getLeft());
    _builder.append(_displayExp);
    _builder.append(" ");
    ExpOp _operator = exp.getOperator();
    String _displayOp = null;
    if (_operator!=null) {
      _displayOp=this.displayOp(_operator);
    }
    _builder.append(_displayOp);
    _builder.append(" ");
    Exp _right = exp.getRight();
    CharSequence _displayExp_1 = null;
    if (_right!=null) {
      _displayExp_1=this.displayExp(_right);
    }
    _builder.append(_displayExp_1);
    return _builder;
  }
  
  protected CharSequence _displayExp(final FactorExp fac) {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence _displayExp = this.displayExp(fac.getLeft());
    _builder.append(_displayExp);
    _builder.append(" ");
    FactorOp _operator = fac.getOperator();
    String _displayOp = null;
    if (_operator!=null) {
      _displayOp=this.displayOp(_operator);
    }
    _builder.append(_displayOp);
    _builder.append(" ");
    CharSequence _displayExp_1 = this.displayExp(fac.getRight());
    _builder.append(_displayExp_1);
    return _builder;
  }
  
  protected CharSequence _displayExp(final Number primary) {
    StringConcatenation _builder = new StringConcatenation();
    int _intValue = primary.intValue();
    _builder.append(_intValue);
    return _builder;
  }
  
  protected CharSequence _displayExp(final Parenthesis primary) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("(");
    CharSequence _displayExp = this.displayExp(primary.getExp());
    _builder.append(_displayExp);
    _builder.append(")");
    return _builder;
  }
  
  protected CharSequence _displayExp(final NumberImpl primary) {
    StringConcatenation _builder = new StringConcatenation();
    int _value = primary.getValue();
    _builder.append(_value);
    return _builder;
  }
  
  protected CharSequence _displayExp(final ParenthesisImpl primary) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("(");
    CharSequence _displayExp = this.displayExp(primary.getExp());
    _builder.append(_displayExp);
    _builder.append(")");
    return _builder;
  }
  
  protected String _displayOp(final Plus op) {
    return "+";
  }
  
  protected String _displayOp(final Minus op) {
    return "-";
  }
  
  protected String _displayOp(final Mult op) {
    return "*";
  }
  
  protected String _displayOp(final Div op) {
    return "/";
  }
  
  public int computeExp(final Object number) {
    if (number instanceof NumberImpl) {
      return _computeExp((NumberImpl)number);
    } else if (number instanceof ParenthesisImpl) {
      return _computeExp((ParenthesisImpl)number);
    } else if (number instanceof BasicExp) {
      return _computeExp((BasicExp)number);
    } else if (number instanceof FactorExp) {
      return _computeExp((FactorExp)number);
    } else if (number instanceof Parenthesis) {
      return _computeExp((Parenthesis)number);
    } else if (number instanceof Exp) {
      return _computeExp((Exp)number);
    } else if (number instanceof Number) {
      return _computeExp((Number)number);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(number).toString());
    }
  }
  
  public CharSequence displayExp(final Object primary) {
    if (primary instanceof NumberImpl) {
      return _displayExp((NumberImpl)primary);
    } else if (primary instanceof ParenthesisImpl) {
      return _displayExp((ParenthesisImpl)primary);
    } else if (primary instanceof BasicExp) {
      return _displayExp((BasicExp)primary);
    } else if (primary instanceof FactorExp) {
      return _displayExp((FactorExp)primary);
    } else if (primary instanceof Parenthesis) {
      return _displayExp((Parenthesis)primary);
    } else if (primary instanceof Exp) {
      return _displayExp((Exp)primary);
    } else if (primary instanceof Number) {
      return _displayExp((Number)primary);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(primary).toString());
    }
  }
  
  public String displayOp(final EObject op) {
    if (op instanceof Div) {
      return _displayOp((Div)op);
    } else if (op instanceof Minus) {
      return _displayOp((Minus)op);
    } else if (op instanceof Mult) {
      return _displayOp((Mult)op);
    } else if (op instanceof Plus) {
      return _displayOp((Plus)op);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(op).toString());
    }
  }
}
