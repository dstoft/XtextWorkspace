/**
 * generated by Xtext 2.24.0
 */
package sdu.mdsd.math.interpreter.generator;

import com.google.common.collect.Iterators;
import java.util.Arrays;
import javax.swing.JOptionPane;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import sdu.mdsd.math.interpreter.mathInterpreter.Exp;
import sdu.mdsd.math.interpreter.mathInterpreter.ExpOp;
import sdu.mdsd.math.interpreter.mathInterpreter.Factor;
import sdu.mdsd.math.interpreter.mathInterpreter.MathExp;
import sdu.mdsd.math.interpreter.mathInterpreter.Minus;
import sdu.mdsd.math.interpreter.mathInterpreter.Plus;
import sdu.mdsd.math.interpreter.mathInterpreter.Primary;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class MathInterpreterGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    final MathExp math = Iterators.<MathExp>filter(resource.getAllContents(), MathExp.class).next();
    final int result = this.compute(math);
    CharSequence _display = this.display(math);
    String _plus = ("Math expression = " + _display);
    System.out.println(_plus);
    JOptionPane.showMessageDialog(null, ("result = " + Integer.valueOf(result)), "Math Language", JOptionPane.INFORMATION_MESSAGE);
  }
  
  public int compute(final MathExp math) {
    return this.computeExp(math.getExp());
  }
  
  public int computeExp(final Exp exp) {
    return 87;
  }
  
  public int computePrim(final Primary primary) {
    return 87;
  }
  
  public CharSequence display(final MathExp math) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("Math[");
    CharSequence _displayExp = this.displayExp(math.getExp());
    _builder.append(_displayExp);
    _builder.append("]");
    return _builder;
  }
  
  public CharSequence displayExp(final Exp exp) {
    StringConcatenation _builder = new StringConcatenation();
    return _builder;
  }
  
  public CharSequence displayFactor(final Factor fac) {
    StringConcatenation _builder = new StringConcatenation();
    return _builder;
  }
  
  protected String _displayOp(final Plus op) {
    return "+";
  }
  
  protected String _displayOp(final Minus op) {
    return "-";
  }
  
  public CharSequence displayFactor(final Primary primary) {
    return "?";
  }
  
  public String displayOp(final ExpOp op) {
    if (op instanceof Minus) {
      return _displayOp((Minus)op);
    } else if (op instanceof Plus) {
      return _displayOp((Plus)op);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(op).toString());
    }
  }
}
