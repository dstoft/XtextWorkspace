/**
 * generated by Xtext 2.24.0
 */
package sdu.mdsd.math.interpreter.generator;

import com.google.common.collect.Iterators;
import java.util.Arrays;
import javax.swing.JOptionPane;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import sdu.mdsd.math.interpreter.mathInterpreter.Div;
import sdu.mdsd.math.interpreter.mathInterpreter.Exp;
import sdu.mdsd.math.interpreter.mathInterpreter.ExpOp;
import sdu.mdsd.math.interpreter.mathInterpreter.Factor;
import sdu.mdsd.math.interpreter.mathInterpreter.FactorOp;
import sdu.mdsd.math.interpreter.mathInterpreter.MathExp;
import sdu.mdsd.math.interpreter.mathInterpreter.Minus;
import sdu.mdsd.math.interpreter.mathInterpreter.Mult;
import sdu.mdsd.math.interpreter.mathInterpreter.Parenthesis;
import sdu.mdsd.math.interpreter.mathInterpreter.Plus;
import sdu.mdsd.math.interpreter.mathInterpreter.Primary;
import sdu.mdsd.math.interpreter.mathInterpreter.impl.NumberImpl;
import sdu.mdsd.math.interpreter.mathInterpreter.impl.ParenthesisImpl;
import sdu.mdsd.math.interpreter.mathInterpreter.impl.PrimaryImpl;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class MathInterpreterGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    final MathExp math = Iterators.<MathExp>filter(resource.getAllContents(), MathExp.class).next();
    final int result = this.compute(math);
    CharSequence _display = this.display(math);
    String _plus = ("Math expression = " + _display);
    System.out.println(_plus);
    JOptionPane.showMessageDialog(null, ("result = " + Integer.valueOf(result)), "Math Language", JOptionPane.INFORMATION_MESSAGE);
  }
  
  public static int staticCompute(final MathExp math) {
    return new MathInterpreterGenerator().compute(math);
  }
  
  public int compute(final MathExp math) {
    return this.computeExp(math.getExp());
  }
  
  public int computeExp(final Exp exp) {
    int _xblockexpression = (int) 0;
    {
      int left = 0;
      EObject _left = exp.getLeft();
      boolean _tripleEquals = (_left == null);
      if (_tripleEquals) {
        System.out.println("left is null!");
      }
      ExpOp _operator = exp.getOperator();
      boolean _tripleEquals_1 = (_operator == null);
      if (_tripleEquals_1) {
        System.out.println("op is null!");
      }
      Factor _right = exp.getRight();
      boolean _tripleEquals_2 = (_right == null);
      if (_tripleEquals_2) {
        System.out.println("right is null!");
      }
      EObject _left_1 = exp.getLeft();
      boolean _matched = false;
      if (_left_1 instanceof Exp) {
        _matched=true;
        EObject _left_2 = exp.getLeft();
        left = this.computeExp(((Exp) _left_2));
      }
      if (!_matched) {
        if (_left_1 instanceof Factor) {
          _matched=true;
          EObject _left_2 = exp.getLeft();
          return this.computeFactor(((Factor) _left_2));
        }
      }
      if (!_matched) {
        System.out.println("Left is default");
      }
      int _switchResult_1 = (int) 0;
      ExpOp _operator_1 = exp.getOperator();
      boolean _matched_1 = false;
      if (_operator_1 instanceof Plus) {
        _matched_1=true;
        int _computeFactor = this.computeFactor(exp.getRight());
        _switchResult_1 = (left + _computeFactor);
      }
      if (!_matched_1) {
        if (_operator_1 instanceof Minus) {
          _matched_1=true;
          int _computeFactor = this.computeFactor(exp.getRight());
          _switchResult_1 = (left - _computeFactor);
        }
      }
      if (!_matched_1) {
        _switchResult_1 = left;
      }
      _xblockexpression = _switchResult_1;
    }
    return _xblockexpression;
  }
  
  public int computeFactor(final Factor factor) {
    int _xblockexpression = (int) 0;
    {
      int left = 0;
      EObject _left = factor.getLeft();
      boolean _matched = false;
      if (_left instanceof Factor) {
        _matched=true;
        EObject _left_1 = factor.getLeft();
        left = this.computeFactor(((Factor) _left_1));
      }
      if (!_matched) {
        if (_left instanceof Primary) {
          _matched=true;
          EObject _left_1 = factor.getLeft();
          left = this.computePrim(((Primary) _left_1));
        }
      }
      int _switchResult_1 = (int) 0;
      FactorOp _operator = factor.getOperator();
      boolean _matched_1 = false;
      if (_operator instanceof Mult) {
        _matched_1=true;
        int _computePrim = this.computePrim(factor.getRight());
        _switchResult_1 = (left * _computePrim);
      }
      if (!_matched_1) {
        if (_operator instanceof Div) {
          _matched_1=true;
          int _computePrim = this.computePrim(factor.getRight());
          _switchResult_1 = (left / _computePrim);
        }
      }
      if (!_matched_1) {
        _switchResult_1 = left;
      }
      _xblockexpression = _switchResult_1;
    }
    return _xblockexpression;
  }
  
  public int computePrim(final Primary primary) {
    int _switchResult = (int) 0;
    boolean _matched = false;
    if (primary instanceof Number) {
      _matched=true;
      return ((Number) primary).intValue();
    }
    if (!_matched) {
      if (primary instanceof Parenthesis) {
        _matched=true;
        return this.computeExp(((Parenthesis) primary).getExp());
      }
    }
    if (!_matched) {
      if (primary instanceof PrimaryImpl) {
        _matched=true;
        return this.computePrim(((PrimaryImpl) primary));
      }
    }
    if (!_matched) {
      _switchResult = (-1000);
    }
    return _switchResult;
  }
  
  public int computePrim(final PrimaryImpl primary) {
    int _switchResult = (int) 0;
    boolean _matched = false;
    if (primary instanceof NumberImpl) {
      _matched=true;
      return ((NumberImpl) primary).getValue();
    }
    if (!_matched) {
      if (primary instanceof ParenthesisImpl) {
        _matched=true;
        return this.computeExp(((ParenthesisImpl) primary).getExp());
      }
    }
    if (!_matched) {
      _switchResult = (-100);
    }
    return _switchResult;
  }
  
  public CharSequence display(final MathExp math) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("Math[");
    CharSequence _displayExp = this.displayExp(math.getExp());
    _builder.append(_displayExp);
    _builder.append("]");
    return _builder;
  }
  
  public CharSequence displayExp(final Exp exp) {
    CharSequence _switchResult = null;
    EObject _left = exp.getLeft();
    boolean _matched = false;
    if (_left instanceof Exp) {
      _matched=true;
      StringConcatenation _builder = new StringConcatenation();
      EObject _left_1 = exp.getLeft();
      CharSequence _displayExp = this.displayExp(((Exp) _left_1));
      _builder.append(_displayExp);
      _builder.append(" ");
      ExpOp _operator = exp.getOperator();
      String _displayOp = null;
      if (_operator!=null) {
        _displayOp=this.displayOp(_operator);
      }
      _builder.append(_displayOp);
      _builder.append(" ");
      Factor _right = exp.getRight();
      CharSequence _displayFactor = null;
      if (_right!=null) {
        _displayFactor=this.displayFactor(_right);
      }
      _builder.append(_displayFactor);
      _switchResult = _builder;
    }
    if (!_matched) {
      if (_left instanceof Factor) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        EObject _left_1 = exp.getLeft();
        CharSequence _displayFactor = this.displayFactor(((Factor) _left_1));
        _builder.append(_displayFactor);
        _switchResult = _builder;
      }
    }
    if (!_matched) {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Mega wow");
      _switchResult = _builder;
    }
    return _switchResult;
  }
  
  public CharSequence displayFactor(final Factor fac) {
    CharSequence _switchResult = null;
    EObject _left = fac.getLeft();
    boolean _matched = false;
    if (_left instanceof Factor) {
      _matched=true;
      StringConcatenation _builder = new StringConcatenation();
      EObject _left_1 = fac.getLeft();
      CharSequence _displayFactor = this.displayFactor(((Factor) _left_1));
      _builder.append(_displayFactor);
      _builder.append(" ");
      FactorOp _operator = fac.getOperator();
      String _displayOp = null;
      if (_operator!=null) {
        _displayOp=this.displayOp(_operator);
      }
      _builder.append(_displayOp);
      _builder.append(" ");
      Primary _right = fac.getRight();
      CharSequence _displayPrim = null;
      if (_right!=null) {
        _displayPrim=this.displayPrim(_right);
      }
      _builder.append(_displayPrim);
      _switchResult = _builder;
    }
    if (!_matched) {
      if (_left instanceof Primary) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        EObject _left_1 = fac.getLeft();
        CharSequence _displayPrim = this.displayPrim(((Primary) _left_1));
        _builder.append(_displayPrim);
        _switchResult = _builder;
      }
    }
    if (!_matched) {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Uber wow");
      _switchResult = _builder;
    }
    return _switchResult;
  }
  
  public CharSequence displayPrim(final Primary primary) {
    CharSequence _switchResult = null;
    boolean _matched = false;
    if (primary instanceof Number) {
      _matched=true;
      StringConcatenation _builder = new StringConcatenation();
      int _intValue = ((Number) primary).intValue();
      _builder.append(_intValue);
      _switchResult = _builder;
    }
    if (!_matched) {
      if (primary instanceof Parenthesis) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("(");
        CharSequence _displayExp = this.displayExp(((Parenthesis) primary).getExp());
        _builder.append(_displayExp);
        _builder.append(")");
        _switchResult = _builder;
      }
    }
    if (!_matched) {
      if (primary instanceof PrimaryImpl) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        CharSequence _displayPrim = this.displayPrim(((PrimaryImpl) primary));
        _builder.append(_displayPrim);
        _switchResult = _builder;
      }
    }
    return _switchResult;
  }
  
  public CharSequence displayPrim(final PrimaryImpl primary) {
    CharSequence _switchResult = null;
    boolean _matched = false;
    if (primary instanceof NumberImpl) {
      _matched=true;
      StringConcatenation _builder = new StringConcatenation();
      int _value = ((NumberImpl) primary).getValue();
      _builder.append(_value);
      _switchResult = _builder;
    }
    if (!_matched) {
      if (primary instanceof ParenthesisImpl) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("(");
        CharSequence _displayExp = this.displayExp(((ParenthesisImpl) primary).getExp());
        _builder.append(_displayExp);
        _builder.append(")");
        _switchResult = _builder;
      }
    }
    if (!_matched) {
      if (primary instanceof PrimaryImpl) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("crazy wow");
        _switchResult = _builder;
      }
    }
    return _switchResult;
  }
  
  protected String _displayOp(final Plus op) {
    return "+";
  }
  
  protected String _displayOp(final Minus op) {
    return "-";
  }
  
  protected String _displayOp(final Mult op) {
    return "*";
  }
  
  protected String _displayOp(final Div op) {
    return "/";
  }
  
  public String displayOp(final EObject op) {
    if (op instanceof Div) {
      return _displayOp((Div)op);
    } else if (op instanceof Minus) {
      return _displayOp((Minus)op);
    } else if (op instanceof Mult) {
      return _displayOp((Mult)op);
    } else if (op instanceof Plus) {
      return _displayOp((Plus)op);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(op).toString());
    }
  }
}
